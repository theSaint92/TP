#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseCasinoModel
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Casino")]
	public partial class CasinoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClients(Clients instance);
    partial void UpdateClients(Clients instance);
    partial void DeleteClients(Clients instance);
    partial void InsertGames(Games instance);
    partial void UpdateGames(Games instance);
    partial void DeleteGames(Games instance);
    partial void InsertPlayGames(PlayGames instance);
    partial void UpdatePlayGames(PlayGames instance);
    partial void DeletePlayGames(PlayGames instance);
    partial void InsertParticipations(Participations instance);
    partial void UpdateParticipations(Participations instance);
    partial void DeleteParticipations(Participations instance);
    #endregion
		
		public CasinoDataContext() : 
				base(global::DatabaseCasinoModel.Properties.Settings.Default.CasinoConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public CasinoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CasinoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CasinoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CasinoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Clients> Clients
		{
			get
			{
				return this.GetTable<Clients>();
			}
		}
		
		public System.Data.Linq.Table<Games> Games
		{
			get
			{
				return this.GetTable<Games>();
			}
		}
		
		public System.Data.Linq.Table<PlayGames> PlayGames
		{
			get
			{
				return this.GetTable<PlayGames>();
			}
		}
		
		public System.Data.Linq.Table<Participations> Participations
		{
			get
			{
				return this.GetTable<Participations>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Clients : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Surname;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private EntitySet<Participations> _Participations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    #endregion
		
		public Clients()
		{
			this._Participations = new EntitySet<Participations>(new Action<Participations>(this.attach_Participations), new Action<Participations>(this.detach_Participations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_Participations", Storage="_Participations", ThisKey="Id", OtherKey="Participator")]
		public EntitySet<Participations> Participations
		{
			get
			{
				return this._Participations;
			}
			set
			{
				this._Participations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Participations(Participations entity)
		{
			this.SendPropertyChanging();
			entity.Clients = this;
		}
		
		private void detach_Participations(Participations entity)
		{
			this.SendPropertyChanging();
			entity.Clients = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Games")]
	public partial class Games : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _GameName;
		
		private string _GameDescription;
		
		private EntitySet<PlayGames> _PlayGames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGameNameChanging(string value);
    partial void OnGameNameChanged();
    partial void OnGameDescriptionChanging(string value);
    partial void OnGameDescriptionChanged();
    #endregion
		
		public Games()
		{
			this._PlayGames = new EntitySet<PlayGames>(new Action<PlayGames>(this.attach_PlayGames), new Action<PlayGames>(this.detach_PlayGames));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string GameName
		{
			get
			{
				return this._GameName;
			}
			set
			{
				if ((this._GameName != value))
				{
					this.OnGameNameChanging(value);
					this.SendPropertyChanging();
					this._GameName = value;
					this.SendPropertyChanged("GameName");
					this.OnGameNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameDescription", DbType="VarChar(5000)")]
		public string GameDescription
		{
			get
			{
				return this._GameDescription;
			}
			set
			{
				if ((this._GameDescription != value))
				{
					this.OnGameDescriptionChanging(value);
					this.SendPropertyChanging();
					this._GameDescription = value;
					this.SendPropertyChanged("GameDescription");
					this.OnGameDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Games_PlayGames", Storage="_PlayGames", ThisKey="Id", OtherKey="Game")]
		public EntitySet<PlayGames> PlayGames
		{
			get
			{
				return this._PlayGames;
			}
			set
			{
				this._PlayGames.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayGames(PlayGames entity)
		{
			this.SendPropertyChanging();
			entity.Games = this;
		}
		
		private void detach_PlayGames(PlayGames entity)
		{
			this.SendPropertyChanging();
			entity.Games = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayGames")]
	public partial class PlayGames : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Game;
		
		private System.DateTime _StartTime;
		
		private System.TimeSpan _Duration;
		
		private decimal _MinimumDeposit;
		
		private decimal _EntryFee;
		
		private EntitySet<Participations> _Participations;
		
		private EntityRef<Games> _Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGameChanging(int value);
    partial void OnGameChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnDurationChanging(System.TimeSpan value);
    partial void OnDurationChanged();
    partial void OnMinimumDepositChanging(decimal value);
    partial void OnMinimumDepositChanged();
    partial void OnEntryFeeChanging(decimal value);
    partial void OnEntryFeeChanged();
    #endregion
		
		public PlayGames()
		{
			this._Participations = new EntitySet<Participations>(new Action<Participations>(this.attach_Participations), new Action<Participations>(this.detach_Participations));
			this._Games = default(EntityRef<Games>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Game", DbType="Int NOT NULL")]
		public int Game
		{
			get
			{
				return this._Game;
			}
			set
			{
				if ((this._Game != value))
				{
					if (this._Games.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameChanging(value);
					this.SendPropertyChanging();
					this._Game = value;
					this.SendPropertyChanged("Game");
					this.OnGameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Time NOT NULL")]
		public System.TimeSpan Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinimumDeposit", DbType="Money NOT NULL")]
		public decimal MinimumDeposit
		{
			get
			{
				return this._MinimumDeposit;
			}
			set
			{
				if ((this._MinimumDeposit != value))
				{
					this.OnMinimumDepositChanging(value);
					this.SendPropertyChanging();
					this._MinimumDeposit = value;
					this.SendPropertyChanged("MinimumDeposit");
					this.OnMinimumDepositChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryFee", DbType="Money NOT NULL")]
		public decimal EntryFee
		{
			get
			{
				return this._EntryFee;
			}
			set
			{
				if ((this._EntryFee != value))
				{
					this.OnEntryFeeChanging(value);
					this.SendPropertyChanging();
					this._EntryFee = value;
					this.SendPropertyChanged("EntryFee");
					this.OnEntryFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayGames_Participations", Storage="_Participations", ThisKey="Id", OtherKey="PlayedGame")]
		public EntitySet<Participations> Participations
		{
			get
			{
				return this._Participations;
			}
			set
			{
				this._Participations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Games_PlayGames", Storage="_Games", ThisKey="Game", OtherKey="Id", IsForeignKey=true)]
		public Games Games
		{
			get
			{
				return this._Games.Entity;
			}
			set
			{
				Games previousValue = this._Games.Entity;
				if (((previousValue != value) 
							|| (this._Games.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Games.Entity = null;
						previousValue.PlayGames.Remove(this);
					}
					this._Games.Entity = value;
					if ((value != null))
					{
						value.PlayGames.Add(this);
						this._Game = value.Id;
					}
					else
					{
						this._Game = default(int);
					}
					this.SendPropertyChanged("Games");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Participations(Participations entity)
		{
			this.SendPropertyChanging();
			entity.PlayGames = this;
		}
		
		private void detach_Participations(Participations entity)
		{
			this.SendPropertyChanging();
			entity.PlayGames = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Participations")]
	public partial class Participations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Participator;
		
		private int _PlayedGame;
		
		private System.DateTime _StartTime;
		
		private System.TimeSpan _Duration;
		
		private decimal _Profit;
		
		private EntityRef<Clients> _Clients;
		
		private EntityRef<PlayGames> _PlayGames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnParticipatorChanging(int value);
    partial void OnParticipatorChanged();
    partial void OnPlayedGameChanging(int value);
    partial void OnPlayedGameChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnDurationChanging(System.TimeSpan value);
    partial void OnDurationChanged();
    partial void OnProfitChanging(decimal value);
    partial void OnProfitChanged();
    #endregion
		
		public Participations()
		{
			this._Clients = default(EntityRef<Clients>);
			this._PlayGames = default(EntityRef<PlayGames>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Participator", DbType="Int NOT NULL")]
		public int Participator
		{
			get
			{
				return this._Participator;
			}
			set
			{
				if ((this._Participator != value))
				{
					if (this._Clients.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParticipatorChanging(value);
					this.SendPropertyChanging();
					this._Participator = value;
					this.SendPropertyChanged("Participator");
					this.OnParticipatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayedGame", DbType="Int NOT NULL")]
		public int PlayedGame
		{
			get
			{
				return this._PlayedGame;
			}
			set
			{
				if ((this._PlayedGame != value))
				{
					if (this._PlayGames.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayedGameChanging(value);
					this.SendPropertyChanging();
					this._PlayedGame = value;
					this.SendPropertyChanged("PlayedGame");
					this.OnPlayedGameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Time NOT NULL")]
		public System.TimeSpan Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profit", DbType="Money NOT NULL")]
		public decimal Profit
		{
			get
			{
				return this._Profit;
			}
			set
			{
				if ((this._Profit != value))
				{
					this.OnProfitChanging(value);
					this.SendPropertyChanging();
					this._Profit = value;
					this.SendPropertyChanged("Profit");
					this.OnProfitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_Participations", Storage="_Clients", ThisKey="Participator", OtherKey="Id", IsForeignKey=true)]
		public Clients Clients
		{
			get
			{
				return this._Clients.Entity;
			}
			set
			{
				Clients previousValue = this._Clients.Entity;
				if (((previousValue != value) 
							|| (this._Clients.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clients.Entity = null;
						previousValue.Participations.Remove(this);
					}
					this._Clients.Entity = value;
					if ((value != null))
					{
						value.Participations.Add(this);
						this._Participator = value.Id;
					}
					else
					{
						this._Participator = default(int);
					}
					this.SendPropertyChanged("Clients");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayGames_Participations", Storage="_PlayGames", ThisKey="PlayedGame", OtherKey="Id", IsForeignKey=true)]
		public PlayGames PlayGames
		{
			get
			{
				return this._PlayGames.Entity;
			}
			set
			{
				PlayGames previousValue = this._PlayGames.Entity;
				if (((previousValue != value) 
							|| (this._PlayGames.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayGames.Entity = null;
						previousValue.Participations.Remove(this);
					}
					this._PlayGames.Entity = value;
					if ((value != null))
					{
						value.Participations.Add(this);
						this._PlayedGame = value.Id;
					}
					else
					{
						this._PlayedGame = default(int);
					}
					this.SendPropertyChanged("PlayGames");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
